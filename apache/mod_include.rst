``mod_include``
===============

概述
----

``mod_include`` 模块可以过滤发给客户端的文件。
该过程由特殊格式的 ``SGML`` 注释，即元素进行控制；
元素支持条件文本，可以加载其他文件或程序以及设置打印环境变量。

开启 SSI
--------

“服务端嵌入” (SSI) 通过 ``INCLUDES`` 过滤器完成。
如果文档后缀为 ``.shtml``，则以下指令命令阿帕奇对该文档进行解析，
解析结果存在新文档中，且新文档的 ``mime`` 类型为 ``text/html``。

.. code-block:: html
 
 AddType text/html .shtml
 AddOutputFilter INCLUDES .shtml

同时必须使用指令 ``Options +Includes``。
（在 ``<Directory>`` / ``.htacess`` 文件中设置。）

为了后向兼容， ``server_parsed`` 处理器也会使用 ``INCLUDES`` 过滤器。
同时，阿帕奇也会对 ``mime`` 类型为 ``text/x-server_parsed-html`` 或 ``text/x-server_parsed-html3`` 的文档用 ``INCLUDES`` 过滤器过滤。

``PATH_INFO``
-------------

默认情况下，阿帕奇处理文件的 SSI 指令时不接受带有 ``PATH_INFO`` （跟踪路径名信息）的请求。
可以使用 ``AcceptPathInfo`` 指令配置，使服务器接受带有 ``PATH_INFO`` 的请求。

可用元素
--------

嵌入了 SGML 注释，也就是特殊命令的文档被阿帕奇解析为 HTML 文档。

命令语法：``<!--#element attribute=value attribute=value ... -->``。

其中，``value`` 一般包含在双引号内，也可以用单引号或者重音符 `````。

.. note::
 注释结束符 ``-->`` 前面必须有一个空格，保证不会被当做 SSI 符号的一部分。
 ``<!--#`` 不能有任何空格。

元素有：

+--------------+----------------------+
| element      | 说明                 |
+==============+======================+
| ``config``   | 设置输出格式         |
+--------------+----------------------+
| ``echo``     | 打印变量             |
+--------------+----------------------+
| ``exec``     | 执行内部程序         |
+--------------+----------------------+
| ``fsize``    | 打印文件大小         |
+--------------+----------------------+
| ``flastod``  | 打印文件最近修改时间 |
+--------------+----------------------+
| ``include``  | 包含文件             |
+--------------+----------------------+
| ``printenv`` | 打印所有可获取的变量 |
+--------------+----------------------+
| ``set``      | 设置一个变量的值     |
+--------------+----------------------+

SSI 元素可以由其他模块定义，不单单只有 ``mod_include``。
但是 ``exec`` 元素是由 ``mod_cgi`` 提供的，只有这个模块加载了之后，才可以使用。

``config``
----------

控制解析的不同方面，它含有以下属性：

+-------------+-----------------------------------------------------------------------------------------+
| attribute   | value                                                                                   |
+=============+=========================================================================================+
| ``echomsg`` | 发送给给客户端的提示信息，表示 ``echo`` 试图打印未定义变量；                            |
|             | 值会覆盖 ``SSIUndefinedEcho`` 指令生成的消息文本                                        |
+-------------+-----------------------------------------------------------------------------------------+
| ``errmsg``  | 发送给客户端的错误信息，表示文档解析出错；                                              |
|             | 值会覆盖 ``SSIErrorMsg`` 指令生成的消息文本                                             |
+-------------+-----------------------------------------------------------------------------------------+
| ``sizefmt`` | 表示文件大小，值为 ``bytes`` / ``abbrev``，后者会随值的大小选择合适单位(``Kb/Mb`` etc.) |
+-------------+-----------------------------------------------------------------------------------------+
| ``timefmt`` | 设置时间打印格式                                                                        |
+-------------+-----------------------------------------------------------------------------------------+

``echo``
--------

打印 :ref:`包含变量<include_var>` 的值。

如果变量没有赋值，则打印的是由 ``SSIUndefinedEcho`` 指令定义的消息。
打印日期遵守 ``config`` 函数的属性 ``timefmt`` 规定的格式。

属性：

+--------------+--------------------------------------------+--------------------------------------------------------+
| attribute    | value                                      | example                                                |
+==============+============================================+========================================================+
| ``var``      | 值是要打印的变量名                         | ``<!--#echo var="DATE_LOCAL" -->``                     |
+--------------+--------------------------------------------+--------------------------------------------------------+
| ``decoding`` | 是否对变量解码                             |                                                        |
+--------------+--------------------------------------------+--------------------------------------------------------+
| ``encoding`` | 在输出变量之前，对变量中的特殊字符进行编码 | ``<!--#echo encoding="entity" var="QUERY_STRING" -->`` |
+--------------+--------------------------------------------+--------------------------------------------------------+

解码方式：

+--------------------+-----------------------------------------------------------------+
| decoding           | description                                                     |
+====================+=================================================================+
| ``none`` (default) | 不做解码                                                        |
+--------------------+-----------------------------------------------------------------+
| ``url``            | 对 ``%-编码`` 的URL 进行解码                                    |
+--------------------+-----------------------------------------------------------------+
| ``urlencoded``     | 对 ``application/x-www-form-urlencoded`` 格式的查询字符进行解码 |
+--------------------+-----------------------------------------------------------------+
| ``entity``         | 对 HTML 实体进行解码                                            |
+--------------------+-----------------------------------------------------------------+
| ``base64``         | 进行 ``base64`` 解码                                            |
+--------------------+-----------------------------------------------------------------+

.. note:: 
 在对变量做进一步编码之前，先进行解码。
 如果定义多种解码方式，则用逗号隔开。
 解码设置的效用一直持续到另一个解码属性为止，或者直到元素结束。

编码方式：

+----------------+-----------------------------------------------+
| coding         | description                                   |
+================+===============================================+
| ``none``       | 不做编码                                      |
+----------------+-----------------------------------------------+
| ``url``        | 对 URL 做 ``%-编码``                          |
+----------------+-----------------------------------------------+
| ``urlencoded`` | 做 ``application/x-www-form-urlencoded`` 编码 |
+----------------+-----------------------------------------------+
| ``base64``     | 做 ``base64`` 编码                            |
+----------------+-----------------------------------------------+
| ``entity``     | 对实体做编码，如段落                          |
+----------------+-----------------------------------------------+

编码设置的效用一直持续到另一个编码属性为止，或者直到元素结束。
``encoding`` 属性前面的 ``var`` 属性必须是有效的。

.. warning:: 为防止出现脚本出现交叉引用，最好将用户数据做编码转换。

``exec``
--------

该指令执行给定的 shell 命令或者恶CGI 脚本。
需要加载 ``mod_cgi`` 模块到服务器。
如果 ``Options`` 设置了 ``IncludeNOEXEC`` 选项，则该指令无效。

它的属性：

* ``cgi``
  
  值是一个 ``%-编码`` 的 URL 路径，指向一个 CGI 脚本。
  如果路径不是以 ``/`` 开始的，则会被当做当前路径下的 CGI 脚本。

  .. note:: 
   服务器不会检查该文档是否真正的 CGI 脚本；
   包含脚本的目录必须支持 CGI 脚本。

  用 ``ScriptAlias`` / ``Options ExecCGI`` 设置支持 CGI 脚本。

  将客户端请求中的 ``PATH_INFO`` 和 ``QUERY_STRING`` 传递给 CGI 脚本；
  包含变量对于脚本和标准 CGI 环境是可见的。

  例如：``<!--#exec cgi="/cgi-bin/example.cgi" -->``。

  如果脚本返回 ``Location:header``，而不是输出，则会被转化为 HTML 锚点。

  .. note:: 锚点是一个自动定位系统，可以定位网页的某个位置。
   建立指向锚点的链接之后，点击链接就能回到网页的该位置。

  用 ``include virtual`` 比 ``exec cgi`` 更好。
  如果想通过查询字符串，将额外参数传递给 CGI 程序，``exec cgi`` 无法实现，
  但 ``include virtual`` 就可以：

  .. code-block:: html

   <!--#include virtual="/cgi-bin/example.cgi?argument=value" -->

* ``cmd``
  
  服务器将使用 ``/bin/sh`` 执行给定字符串。
  包含变量对于命令行和 CGI 变量的常规设置是可见的。

  ``include virtual`` 代替 ``exec cgi`` / ``exec cmd`` 更好。
  因为前者使用的是标准阿帕奇子请求机制，加载文件或脚本，阿帕奇给予更多的测试和维护。

  另外，在某些平台上（如 ``win32``）或者在 Unix 中使用 ``suexec``时，不能将参数传给 ``exec`` 的指令或者其他包含空格的指令。
  因此，以下指令只在不使用 ``suexec`` (UNIX)时有效，而在 ``win32`` 平台下或者使用 ``suexec`` 时无效。

  .. code-block:: html

   <!--#exec cmd="perl /path/to/perlscript arg1 arg2" -->

``fsize``
---------

打印指定文件的大小，打印格式受到 ``sizefmt`` 的控制。

有以下属性：

*  ``file``
     
   指向当前解析文档的相对目录

   .. code-block:: html
     
    This file is <!--#fisze file="mod_include.html" --> bytes

   不能以 ``/`` 开始，也不能有 ``../``。

* ``virtual``
    
  %-编码的 URL 路径，如果不是以 ``/`` 开始，则与当前文档有关。
  注意，不是打印 CGI 输出的大小，而是 CGI 脚本本身的大小。

  .. code-block:: html

   This file is <!--#fsize virtual="/docs/mod/mod_include.html" --> bytes

  .. note:: 许多例子中，两种属性功能一致。
   但 ``file`` 属性不关心由 URL 空格隔开的别名。

``flastmod``
------------

打印指定文件最近修改日期，受 ``timefmt`` 控制，该属性和 ``fsize`` 一致。
    
``include``
-----------
  
将另一个文档的文本内容插入到正被解析的文件中，任何被包含的文件由常用的访问控制支配。
如果含有解析文件的目录设置了 ``Options IncludeNOEXEC`` 指令，则只加载 ``mime`` 类型为 ``text`` 的文档，如 ``text/plain`` ``text/html``。
否则，像常规方法那样，使用完整的 URL 执行 CGI 脚本，包括查询字符串。

定义文件位置的属性可能会在 ``include`` 元素中出现多次；
轮流使用每个 ``include`` 指令中的属性执行包含操作。

它的属性有：

* ``file``

  值为包含当前解析文档的目录有关。
  不能以 ``../`` 开始，也不能是绝对路径。
  因此，不能江汉文档根目录外的文件，或者当前文档所在目录的前一级目录文件。
  一般总是用 ``virtual`` 属性代替 ``file``

* ``virtual``

  值为 %-编码的 URL 路径。
  URL 不能包含协议（如 ``http``），也不能包含主机名，只包含路径和查询语句（可选）。
  如果不以 ``/`` 开始，则与当前文档有关。

  URL 由属性构建；
  如果客户端访问 URL，则服务器返回的内容会被加载到解析的输出中。
  因此包含文件是可以嵌套的。

  如果指定的 URL 是一个 CGI 程序，则执行它，返回的结果将插入到 ``include`` 指令所在闻之。
  你可能会在一个 CGI URL 中加上查询字符串：

  .. code-block:: html

   <!--#include virtual="/cgi-bin/"example.cgi?argument=value" -->

  将 CGI 程序的输出加载到 HTML 文档中，``include virtual`` 比 ``exec cgi`` 更适合。

  如果 ``KeptBodySize`` 指令正确配置过，且对被包含的文件有效，则 ``POST`` 请求到一个封闭的 HTML 文档，
  会被传递给子请求，子请求是 ``POST`` 方式。
  没有该指令，则所有子请求都是 ``GET`` 指令。

* ``onerror``
 
  值是一个 %-编码的 URL 路径。
  表示试图加载文件或者虚拟属性失败之后，加载或者执行的 URL 路径。
  要使该属性生效，必须在指定 ``file`` / ``virtual`` 属性之后指定该属性。
  如果试图加载或者执行 ``onerror`` 路径失败，或者 ``onerror`` 未指定，则载入默认的错误消息：

  .. code-block:: html

   # Simple example
   <!--#include virtual="/not-exist.html" onerror="/error.html" -->

   #Delicated onerror paths
   <!--#include virtual="/path-a.html" oneerror="/error-a.html" virtual="/path-b.html" onerror="/error-b.html" -->

``printenv``
------------

打印所有存在的变量的名称列表和值。
输出之前，特殊字符作了实体编码。
没有属性。

.. code-block:: html

 <prev> <!--#printenv --> </pre>

``set``
-------

设置变量的值。

有以下属性：

* ``var`` 变量名
* ``value`` 值
* ``decoding``

  在对变量作进一步处理之前，是否对变量解码。

  取值有：``none``, ``url``, ``urlencoded``, ``base64`` 和 ``entity``。

  .. note:: 必须在 ``var`` 之前设置才有效

* ``encoding``

  指定阿帕奇对变量中的特殊字符的编码方式，有 ``none``, ``url``, ``urlencoded``, ``base64`` 和 ``entity``。

  .. note:: 必须在 ``var`` 之前设置才有效

.. _include_var:

包含变量
--------

除了标准 CGI 环境变量之外，还有 ``echo/if/elif`` 指令以及任何文档中调用的程序都可见的变量：

* ``DATE_GMT`` 当前日期（格林威治时间）
* ``DATE_LOCAL`` 和本地时区相关的当前日期
* ``DOCUMENT_NAME`` 用户请求的文档的文件名（所在目录不算）
* ``DOCUMENT_URI`` 用户请求的文档的 %-编码的 URL 路径。
  注意，在嵌套包含语句中，它不是当前文档的 URL；
  如果 URL 是内部修改的（如通过 ``alias`` 或者 ``directoryindex`` 实现），则显示修改后的 URL。
* ``LAST_MODIFIED`` 用户请求的文档的最近修改日期
* ``QUERY_STRING_UNESCAPED``
  
  如果给查询语句，该变量包含该语句，用 %-编码。
  查询语句中的特殊字符前面有转义字符，如 ``/&``。

流控制元素
----------

基础流控制元素：

.. code-block:: html

 <!--#if exper="test_condition" -->
 <!--#elif exper="test_condition" -->
 <!--#else -->
 <!--#endif -->
