内容协商
========

阿帕奇 ``httpd`` 服务器支持内容协商，``HTTP/1.1`` 说明书对内容协商有详细介绍。
内容协商可以根据浏览器对媒体类型，语言，字符集以及编码方式等方面的不同偏好，选用最好的方式显示资源。
它还具有若干特性，针对浏览器发送的协商信息内容不全的请求，采取更加智能的方式进行解析。

内容协商功能由模块 ``mod_negotiation`` 实现，默认情况下该模块在服务器编译的时候静态加载。

关于内容协商
------------

资源有多种不同的显示方式，例如不同语言或者不同媒体类型，或者它们之间的组合。
如何选择更合适的显示方式，一种方法是给用户提供资源目录，由用户自己选择。
但由服务器自动选择显示方式同样是可行的。
因为浏览器可以在每个请求中添加相关信息，表明希望看到的资源显示方式。
例如，可能的话，某个浏览器更希望看到法语表述的信息，不行的话才用英语表述。
浏览器将他们的偏好放在请求头中。
如果要求仅用法语表述信息，浏览器需要在请求头中加上``Accept-Language: fr``。
在多个只有语言特性不同的显示方式中选择一个，可以这样做。

一个更复杂的请求示例：浏览器可以接受法语和英语，但是偏向于法语。
接受多种媒体类型，与普通文本或者其他文本类型相比，更偏向于 HTML 类型。
与其他媒体类型相比，更偏向于 GIF 或 JPEG 图片，当然没有选择余地时，才选择剩下的类型。

.. code-block:: HTML

 Accept-Language: fr; q=1.0, en; q=0.5
 Accept: text/html; q=1.0, text/*; q=0.8, image/gif; q=0.6, image/jpeg; q=0.6, image/*; q=0.5, */*; q=0.1

``httpd`` 支持由“服务器驱动”的内容协商，关于这点，在 ``HTTP/1.1`` 说明书中有具体定义。
它完全支持在请求头中加上 ``Accept``, ``Accept-Language``, ``Accept-Charset`` 以及 ``Accept-Encoding`` 设置。
``httpd`` 也支持半透明的内容协商；半透明内容协商还处在实验阶段，``RFC 2295/2296`` 协议标准对它进行了定义。
但 ``httpd`` 不支持这些协议中定义的“特征协商”。

资源是 URI 指定的概念化实体。
HTTP 服务器，如阿帕奇服务器，针对命名空间中的资源，提供了一系列可访问的显示方式。
每一种显示方式通过字节序列表示，序列由媒体类型，字符集，编码方式等信息构成。
任何时候，每一种资源都可能与显示方式有关。
如果有多种显示方式，则资源的显示通过协商解决；每一种显示方式都是一个 **变体**。
资源变体的不同协商方法即为协商的 **维度**。

``httpd`` 协商
--------------

为了进行资源协商，服务器需要得到每一种变体的信息（即显示方式）。
可以通过两种方法实现：

* 使用类型映射文件(即 ``a*.var``)，显示地指出包含变体信息的文件
* 使用 ``MultiViews`` 选项，隐式地对文件名做模式匹配，从诸多结果中选择一个。

使用类型映射文件
^^^^^^^^^^^^^^^^

类型映射文件和名为 ``type-map`` 的解析器有关；
为兼容老版的 ``httpd`` 配置，可以用 MIME 类型为``application/x-type-map`` 的解析器。
要用到该特性，需要在配置文件中进行解析器设置，将一个文件后缀定义为 ``type-map``；
最好是这样：``AddHandler type-map .var``。

类型映射文件的文件名必须和它们所描述的资源文件相同，只是后面需要添加 ``.var`` 后缀。
在下面的例子中，资源文件名为 ``foo``，因而类型映射文件名为 ``foo.var``。

该文件针对每个可用变体都应该有对应项；这些项由格式类似 HTTP 头部的连续行构成。
不同变体的对应项由空行隔开，同一项中不允许有空行。
按照惯例，映射文件的第一项用于合并所有项（这不是必须的，如果有的话，会被忽略）。

该文件中的 URI 对应的资源文件和映射文件的位置相关
通常，这些文件和映射文件处在同一个目录下，但这不是必须的。
你可以为任意文件提供绝对的或者相对的 URI，只要这些文件和类型映射文件处在同一台服务器上。

.. code-block:: html

 URI: foo

 URI: foo.en.html
 Content-type: text/html
 Content-language: en

 URI: foo.fr.de.html
 Content-type: text/html;charset=iso-8859-2
 Content-language: fr, de

注意，类型映射文件优先于文件扩展名，即使 ``MultiViews`` 选项打开了也是如此。
若变体的起始质量不同，可以用媒体类型的参数 qs 来表示，如下所示：

.. code-block:: html

 URI: foo

 URI: foo.jpeg
 Content-type: image/jpeg; qs=0.8

 URI: foo.gif
 Content-type: image/gif; qs=0.5

 URI: foo.txt
 Content-type: text/plain; qs=0.01

qs 值的范围是 0.000 到 1.000。
注意，如果变体的 qs 值是 0.000，则它永远不会被采用。
没有表明 qs 参数的变体，其 qs 值为 1.0。
qs 参数表明和其他的变体相比，该变体的相关 **质量**，它和客户端的性能无关。
例如，若要显示一张照片，则 JPEG 的文件的起始质量通常高于 ASCII 文件。
而要展示普通的 ASCII 文件，则 ASCII 文件的起始质量高于 JPEG 文件。
所以，对于依赖资源显示特征的变体，qs 值是很重要的。

``MultiViews``
^^^^^^^^^^^^^^

``MultiViews`` 选项针对的目录，这意味着可以在 ``httpd.conf`` 的 ``<Directory>``, ``<Location>`` 或 ``<Files>`` 节点中通过 ``Options`` 指令设置；
或者在 ``.htaccess`` 文件中通过 ``Options`` 指令设置（ ``AllowOverride`` 选项必须设置正确）。
注意：``Options All`` 不会开启 ``MultiViews``，只能通过这样的方式开启：``Options MultiViews``。

``MultiViews`` 的效果：如果服务器收到针对 ``/some/dir/foo`` 的请求，且目录 ``/some/dir`` 的 ``MultiViews`` 选项已经开启，但 ``/some/dir/foo`` 不存在，则服务器会在 ``/some/dir`` 目录下查找名为 ``foo.*`` 的文件，并仿造一个类型映射文件，将这些文件的名称都列入其中，并给它们设置相同的媒体类型和内容编码，以备客户端通过名称查询。
然后挑选一个最匹配的结果返回给客户端。

如果服务器企图给某个目录建立资源目录列表，``MultiViews`` 可搜索指令 ``DirectoryIndex`` 指定的文件。
如果配置文件设置了 ``DirectoryIndex index``，且 ``index.html`` 和 ``index.html3`` 都存在，则服务器会在两者之间进行仲裁。
如果两个文件都不存在，但存在 ``index.cgi``，则服务器会运行这个文件。

在遍历指定目录时，如果以上文件中的某个文件没有 ``mod_mime`` 识别的后缀（每个后缀对应了 Charset, Content-Type, Language 或 Encoding 等信息），则结果取决于指令 ``MultiViewsMatch`` 的设置。
这个指令决定了解析器，过滤器及其它扩展类型是否可以参与 ``MultiViews`` 的协商。