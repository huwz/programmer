标准预定义宏
============

标准预定义宏 [1]_ 由相关的语言标准制定，因而对于那些执行标准的编译器而言，这些预定义宏是可见的。
老的编译器可能只提供部分标准宏。

标准宏名前面带有两个下划线：

* ``__FILE__``
  
  展开之后是一个 C 的字符串常量，表示当前输入文件（即宏所在的文件）的路径，
  预编译器就是通过该路径打开输入文件的。
  该路径和 ``#include`` 语句指定的短名称不同，也不能作为输入文件名参数。
  如 ``/usr/local/include/myheader.h`` 可能就是该宏的展开。

* ``__LINE__``
  
  展开之后是当前行的行号，是一个十进制的整型常量。
  ``__LINE__`` 是一个奇怪的宏，其宏值会随着源代码行号的改变而改变。

  ``__FILE__`` 和 ``__LINE__`` 很有用，通过它们产生错误信息，指明程序中出现的异常，定位异常发生的代码行。
  例如:

  .. code-block:: C
    :linenos:
     
    fprintf(stderr, "Internal error:"
                    "negative string length "
                    "%d at %s, line %d.",
                    length, __FILE__, __LINE__);

  ``#include`` 指令根据包含的文件修改 ``__FILE__`` 和 ``__LINE__``。
  包含文件加载结束后，编译器返回 ``#include`` 语句所在原始文件中，``__FILE__`` 和 ``__LINE__`` 恢复到 ``#include`` 语句之前的值（ ``__LINE__`` 的值等于 ``#include`` 行的行号加1）。

  ``#line`` 指令会修改 ``__LINE__``，也可能改变 ``__FILE__`` 的值。

  ``C99`` 引进了 ``__func__``， ``GCC`` 提供了 ``__FUNCTION__``。
  都表示当前函数的名称字符串（在语法上稍有不同），
  都不是宏。
  预编译器是不知道当前函数的名称的。
  一般和 ``__FILE__`` , ``__LINE__`` 一起使用。

* ``__DATE__``
  
  展开后是一个字符串常量，表示预编译器运行的日期。
  字符串包含11个字符，格式如： ``Feb 12 1996``。
  如果月份里的天号小于10，左边会补一个空格。

  如果 GCC 编译器无法确定当前日期，则每次编译时会发出警告， ``__DATE__`` 会被展开为 ``??? ?? ???``。

* ``__TIME__``
  
  展开之后是一个字符串常量，表示预编译器运行的时间。
  字符串包含8个字符，格式如：``23:59:01``。

  如果 GCC 编译器无法确定当前时间，则每次编译时会发出警告， ``__TIME__`` 会被展开为 ``??:??:??``。

* ``__STDC__``

  正常情况下，该宏展开为1，表示编译器服从标准 C 规范。
  如果编译器是 GNU CPP，则不一定成立。
  在不使用 ``-traditional-cpp`` 选项的前提下，预编译器服从该标准；否则，该宏未定义。

  在某些主机中，系统编译器使用不同的约定， ``__STDC__`` 正常情况下展开为0；
  但是如果用户指定编译器严格服从标准 C 规范时，该宏值为1.

  ``CPP`` 文件在处理系统头文件时服从主机约定，但是在处理用户文件时， ``__STDC__`` 总是1。
  这可能存在问题，例如， Solaris 操作系统的某些版本提供的 X Windows 头文件中，可能未定义 ``__STDC__`` ，也可能将 ``__STDC__`` 定义为1。

* ``__STDC_VERSION__``
  
  展开为标准 C 的版本号，一个 long 型的整数常量，格是为： *yyyymm* L；
  其中 *yyyy* 是版本发行的年份，*mm* 表示版本发行的月份。
  该宏指定了编译器遵循的标准 C 规范的版本。和 ``__STDC__`` 一样，GNU CPP 不一定会严格遵循标准约定，除非它使用的是 GCC 编译器。

  +----------------------+---------------------------------+
  | ``__STDC_VERSION__`` | 说明                            |
  +======================+=================================+
  | 199409L（默认值）    | 1989年的 C 标准，1994年做了修改 |
  +----------------------+---------------------------------+
  | 199901L              | 1999年的 C 标准                 |
  +----------------------+---------------------------------+

  使用 ``-traditional-cpp`` 选项或者编译 ``C++`` ``Objective C`` 时，则未定义该宏。

* ``__STDC_HOSTED``
  
  如果编译器的目标是“宿主环境”，则定义这个宏，宏值为1.
  宿主环境拥有一整套标准 C 的库。

* ``__cplusplus``
  
  C++ 编译器定义了该宏。
  可以使用该宏测试头文件是用 C 编译器还是 C++ 编译器编译。
  这个宏和 ``__STDC_VERSION__`` 相似，同样展开为一个版本号。
  版本号的值取决于选定的语言标准：

  +----------------------+-----------------------+
  | ``__cplusplus``      | version               |
  +======================+=======================+
  | 199711L              | 1998年 C++ 标准       |
  +----------------------+-----------------------+
  | 201103L              | 2011年 C++ 标准       |
  +----------------------+-----------------------+
  | >201103L（不确定值） | 试验中的语言标准 [2]_ |
  +----------------------+-----------------------+

* ``__OBJC__``
  
  Objective_C 编译器定义了该宏，宏值为1。
  可以使用这个宏来检测一个头文件是通过 C 编译器还是 Objective_C 编译器编译。

* ``__ASSEMBLER``
  
  预处理汇编语言时，定义这个宏，宏值为1.

.. [1] https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html
.. [2] 可以通过 ``-std=c++ly`` 和 ``-std=gnu++ly`` 使能
